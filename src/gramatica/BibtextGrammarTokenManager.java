/* Generated By:JavaCC: Do not edit this line. BibtextGrammarTokenManager.java */
package gramatica;

/** Token Manager. */
public class BibtextGrammarTokenManager implements BibtextGrammarConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fffffffff80L) != 0L)
         {
            jjmatchedKind = 45;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x1fffffffff80L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
            return 4;
         }
         return -1;
      case 2:
         if ((active0 & 0x2140000000L) != 0L)
            return 4;
         if ((active0 & 0x1fdebfffff80L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0x20081010300L) != 0L)
            return 4;
         if ((active0 & 0x1dde3efefc80L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 3;
            }
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0xa800000L) != 0L)
            return 4;
         if ((active0 & 0x1dde347efe80L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active0 & 0x80614204800L) != 0L)
            return 4;
         if ((active0 & 0x15d8205eb680L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
            return 4;
         }
         return -1;
      case 6:
         if ((active0 & 0x9800400280L) != 0L)
            return 4;
         if ((active0 & 0x1540201eb400L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
            return 4;
         }
         return -1;
      case 7:
         if ((active0 & 0x1540201eb400L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active0 & 0x10020020000L) != 0L)
            return 4;
         if ((active0 & 0x1440001cb400L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 8;
            return 4;
         }
         return -1;
      case 9:
         if ((active0 & 0x80400L) != 0L)
            return 4;
         if ((active0 & 0x14400014b000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 9;
            return 4;
         }
         return -1;
      case 10:
         if ((active0 & 0x100000140000L) != 0L)
            return 4;
         if ((active0 & 0x4400000b000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 10;
            return 4;
         }
         return -1;
      case 11:
         if ((active0 & 0x44000001000L) != 0L)
            return 4;
         if ((active0 & 0xa000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 11;
            return 4;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 61);
      case 44:
         return jjStopAtPos(0, 60);
      case 45:
         return jjStopAtPos(0, 58);
      case 46:
         return jjStopAtPos(0, 59);
      case 47:
         return jjStopAtPos(0, 63);
      case 58:
         return jjStopAtPos(0, 62);
      case 61:
         return jjStopAtPos(0, 57);
      case 64:
         return jjStopAtPos(0, 56);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x800200000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1200000000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x84000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x28000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x80400000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x20000800000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x300L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3800L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1c000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x60000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 123:
         return jjStopAtPos(0, 5);
      case 125:
         return jjStopAtPos(0, 6);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800c000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a00000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x501080000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000020000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x810000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000103800L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x140d2400700L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x42000040080L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x24200000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000800L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x81000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x800020000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x40008000000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 105:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004400L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000040300L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000102000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000018000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80a00080L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 99:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 4);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000080L);
      case 107:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000200L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x20800000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000001800L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x800402000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x101202028000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10104000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 4);
         return jjMoveStringLiteralDfa5_0(active0, 0xc04048400L);
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 4);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x101020000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1200L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000400000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80200202800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 4);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000e0200L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x50000000000L);
      case 107:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 4);
         break;
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 4);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x101080L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 4);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 4);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x8400L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x820000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x3400L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 4);
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 4);
         break;
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x28000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x20002000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000060000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000008000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 4);
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x108000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 4);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 17, 4);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000001000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 10, 4);
         return jjMoveStringLiteralDfa10_0(active0, 0x108000L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000003000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 20, 4);
         break;
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 44, 4);
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000001000L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 18, 4);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 38, 4);
         break;
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 12, 4);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 42, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(12, 13, 4);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 15, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff080000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(1);
                  }
                  break;
               case 4:
               case 2:
                  if ((0x3ff080000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(2);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(2);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(0);
                  }
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(2);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\173", "\175", "\141\162\164\151\143\154\145", 
"\142\157\157\153", "\142\157\157\153\154\145\164", "\143\157\156\146\145\162\145\156\143\145", 
"\151\156\142\157\157\153", "\151\156\143\157\154\154\145\143\164\151\157\156", 
"\151\156\160\162\157\143\145\145\144\151\156\147\163", "\155\141\156\165\141\154", 
"\155\141\163\164\145\162\163\164\150\145\163\151\163", "\155\151\163\143", "\160\150\144\164\150\145\163\151\163", 
"\160\162\157\143\145\145\144\151\156\147\163", "\164\145\143\150\162\145\160\157\162\164", 
"\165\156\160\165\142\154\151\163\150\145\144", "\101\165\164\150\157\162", "\112\157\165\162\156\141\154", 
"\124\151\164\154\145", "\131\145\141\162", "\115\157\156\164\150", "\116\165\155\142\145\162", 
"\120\141\147\145\163", "\126\157\154\165\155\145", "\120\165\142\154\151\163\150\145\162", 
"\104\157\151", "\116\157\164\145", "\113\145\171", "\105\144\151\164\157\162", 
"\123\145\162\151\145\163", "\101\144\144\162\145\163\163", "\105\144\151\164\151\157\156", 
"\125\162\154", "\110\157\167\160\165\142\154\151\163\150\145\144", 
"\103\150\141\160\164\145\162", "\102\157\157\153\164\151\164\154\145", "\124\171\160\145", 
"\117\162\147\141\156\151\172\141\164\151\157\156", "\123\143\150\157\157\154", "\111\156\163\164\151\164\165\164\151\157\156", 
null, null, null, null, null, null, null, null, null, null, null, "\100", "\75", 
"\55", "\56", "\54", "\47", "\72", "\57", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xff00ffffffffffe1L, 0x0L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[3];
private final int[] jjstateSet = new int[6];
protected char curChar;
/** Constructor. */
public BibtextGrammarTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public BibtextGrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 3; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
